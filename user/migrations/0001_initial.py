# Generated by Django 4.1.6 on 2023-02-05 19:37

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import user.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('phone_number', models.CharField(max_length=50, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Неправильный номер телефона', regex='^\\+?77(\\d{9})$')], verbose_name='phone number')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, null=True, unique=True, verbose_name='email address')),
                ('code', models.CharField(blank=True, max_length=6, null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_secure', models.BooleanField(default=False, verbose_name='secure')),
                ('roles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('ADMIN', 'Admin'), ('USER', 'User')], max_length=20), blank=True, default=list, size=None)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('image', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('gender', models.CharField(blank=True, choices=[('MALE', 'Male'), ('FEMALE', 'Female')], max_length=10, null=True)),
                ('position', models.CharField(blank=True, max_length=150, null=True)),
                ('IIN', models.CharField(blank=True, max_length=12, null=True)),
                ('organization_name', models.CharField(blank=True, max_length=150, null=True)),
                ('BIN', models.CharField(blank=True, max_length=12, null=True)),
                ('BIK', models.CharField(blank=True, max_length=8, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=150, null=True)),
                ('IBAN', models.CharField(blank=True, max_length=20, null=True)),
                ('kbe', models.CharField(blank=True, max_length=2, null=True)),
                ('currency', models.CharField(blank=True, choices=[('тенге', 'Tenge'), ('рубль', 'Ruble'), ('доллар', 'Dollar'), ('евро', 'Euro')], max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', user.managers.CustomUserManager()),
            ],
        ),
    ]
